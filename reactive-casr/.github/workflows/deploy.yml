name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testnet'
        type: choice
        options:
        - testnet
        - mainnet
      deploy_contracts:
        description: 'Deploy contracts'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend'
        required: true
        default: true
        type: boolean

jobs:
  deploy-contracts:
    if: ${{ github.event.inputs.deploy_contracts == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Compile contracts
      run: npx hardhat compile
    
    - name: Deploy to testnet
      if: ${{ github.event.inputs.environment == 'testnet' }}
      run: npx hardhat run scripts/deploy.ts --network lasna-testnet
      env:
        LASNA_TESTNET_RPC: ${{ secrets.LASNA_TESTNET_RPC }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
    
    - name: Deploy to mainnet
      if: ${{ github.event.inputs.environment == 'mainnet' }}
      run: npx hardhat run scripts/deploy.ts --network reactive-mainnet
      env:
        REACTIVE_MAINNET_RPC: ${{ secrets.REACTIVE_MAINNET_RPC }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
    
    - name: Register subscriptions
      if: ${{ github.event.inputs.environment == 'testnet' }}
      run: npx hardhat run scripts/registerSubscriptions.ts --network lasna-testnet
      env:
        LASNA_TESTNET_RPC: ${{ secrets.LASNA_TESTNET_RPC }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
    
    - name: Register subscriptions (mainnet)
      if: ${{ github.event.inputs.environment == 'mainnet' }}
      run: npx hardhat run scripts/registerSubscriptions.ts --network reactive-mainnet
      env:
        REACTIVE_MAINNET_RPC: ${{ secrets.REACTIVE_MAINNET_RPC }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-output-${{ github.event.inputs.environment }}
        path: deploy/output.json

  deploy-frontend:
    if: ${{ github.event.inputs.deploy_frontend == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_REACTIVE_CHAIN_ID: ${{ github.event.inputs.environment == 'mainnet' && '1597' || '1596' }}
        VITE_ORIGIN_POSITION_CONTRACT: ${{ secrets.VITE_ORIGIN_POSITION_CONTRACT }}
        VITE_DESTINATION_HANDLER_CONTRACT: ${{ secrets.VITE_DESTINATION_HANDLER_CONTRACT }}
        VITE_REACTIVE_MANAGER_CONTRACT: ${{ secrets.VITE_REACTIVE_MANAGER_CONTRACT }}
        VITE_NETWORK_NAME: ${{ github.event.inputs.environment == 'mainnet' && 'Reactive Mainnet' || 'Lasna Testnet' }}
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'

  deploy-backend:
    if: ${{ github.event.inputs.deploy_frontend == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Build backend
      run: |
        cd backend
        npm run build
    
    - name: Deploy backend functions to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./backend
        vercel-args: '--prod'

  notify-deployment:
    needs: [deploy-contracts, deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()